syntax = "proto3";
import public "global_options.proto";

option go_package="./;proto";
option java_package = "org.liquibase.grpc.proto";
option java_multiple_files = true;
option java_outer_classname = "ChecksRunProto";

package liquibase.pro;

service ChecksRunService {
  rpc execute(Checks.RunRequest) returns (Response) {}
}

/* Check the changelog or database for issues */
message Checks {
  message RunRequest {
    optional bool auto_enable_new_checks = 1; // Automatically enable new quality checks in liquibase.checks.conf file when they are available. Options: [true|false]
    optional bool auto_update = 2; // Allows automatic backup and updating of liquibase.checks.conf file when new quality checks are available, or for file format changes. Options: [on|off]
    optional bool cache_changelog_file_contents = 3; // If true, sqlFile change type contents will be cached in memory to improve performance, at the cost of higher memory usage. To reduce memory usage, set this to false.
    optional string changelog_file = 4; // Relative or fully qualified path to a Liquibase changelog file.  One of --changelog-file or --url is required.
    optional string changeset_filter = 5; // The changeset filter to use when determining which changesets to run checks against, which can be a comma separated list of the following options: 'all', 'pending'
    optional string check_name = 6; // Comma-separated list of one or more enabled checks to run. Checks to exclude can be prefixed with the ! character. If no checks are specified, all enabled checks will run. Example: --check-name=shortname1,shortname2,!shortname3
    optional bool check_rollbacks = 7; // Allow changeset's rollback code to be analyzed for compliance with currently enabled quality checks.
    optional string checks_output = 8; // Specify which parts of the checks run output should be shown; options: all, issues, issues0, issues1, issues2, issues3, issues4, validated, checksrun, sqlparserfails, skippedchecks, nonapplicablechecks
    optional string checks_packages = 9; // If using a checks packages file, optionally specify which packages should be run from the file as a comma separated list.
    optional string checks_scope = 10; // The Liquibase component to run checks against, which can be a comma separated list of the following options: 'changelog', 'database'
    optional bool checks_scripts_enabled = 11; // Allow execution of custom script checks.
    optional string checks_scripts_path = 12; // Only allow custom scripts found in the specified directories to execute. If not set custom scripts from any location will be allowed to execute.
    optional string checks_settings_file = 13; // Relative or fully qualified path to a checks settings or checks package file for checks execution
    optional string context_filter = 14; // Changeset contexts to match
    optional string default_catalog_name = 15; // The default catalog name to use for the database connection
    optional string default_schema_name = 16; // The default schema name to use for the database connection
    optional string driver = 17; // The JDBC driver class
    optional string driver_properties_file = 18; // The JDBC driver properties file
    optional string format = 19; // [PRO] Option to create JSON output
    optional string label_filter = 20; // Changeset labels to match
    optional string password = 21; // Password to use to connect to the database
    optional bool property_substitution_enabled = 22; // If set to 'true' changesets are evaluated by checks after property substitution. If set to 'false' changesets are evaluated by checks before property substitution, meaning the names of the "property substitution tokens" are evaluated.
    optional bool report_enabled = 23; // [PRO] Enable or disable reporting.
    optional string report_name = 24; // [PRO] The name of the report.
    optional string report_path = 25; // [PRO] The path to the directory to generate the report.
    optional string schemas = 26; // The schemas to check when checks-scope contains 'database'
    optional int32 sql_parser_fail_severity = 27; // The severity that a check which fails due to a SQL parse error will exit with. If not set, use the severity of the configured check. Available values are: 0, 1, 2, 3, 4
    optional string url = 28; // The JDBC database connection URL.  One of --changelog-file or --url is required.
    optional string username = 29; // Username to use to connect to the database
    optional bool verbose = 30; // Verbose flag with optional values of 'True' or 'False'. The default is 'False'.
    liquibase.GlobalOptions global_options = 31;
  }
}

message Response {
  string message = 1;
}
